// Generated by CoffeeScript 1.9.3
(function() {
  'use strict';
  var HttpConnector, expect;

  HttpConnector = require('../../src/connectors/HttpConnector');

  expect = require('expect.js');

  describe('the HttpConnector,', function() {
    return describe('when the post method is called', function(done) {
      it('should instantiate restify http client with the passed url', function(done) {
        var Restify, deps, expectedUrl, instance, params, receivedUrl;
        expectedUrl = 'http://localhost:1234';
        receivedUrl = null;
        Restify = (function() {
          function Restify() {}

          Restify.createStringClient = function(options) {
            var mockPost;
            receivedUrl = options.url;
            return mockPost = {
              post: function() {}
            };
          };

          return Restify;

        })();
        deps = {
          restify: Restify
        };
        params = {
          url: expectedUrl
        };
        instance = new HttpConnector(deps);
        instance.post(params, function() {});
        expect(receivedUrl).to.eql(expectedUrl);
        return done();
      });
      it('should call post with the right params', function() {
        var Restify, deps, expectedData, expectedPath, instance, params, receivedData, receivedPath;
        expectedPath = '/';
        receivedPath = null;
        expectedData = {
          message: 'Test data'
        };
        receivedData = null;
        Restify = (function() {
          function Restify() {}

          Restify.createStringClient = function(options) {
            var client;
            return client = {
              post: function(path, object, callback) {
                receivedPath = path;
                return receivedData = object;
              }
            };
          };

          return Restify;

        })();
        deps = {
          restify: Restify
        };
        params = {
          url: '',
          path: expectedPath,
          data: expectedData
        };
        instance = new HttpConnector(deps);
        instance.post(params, function() {});
        expect(receivedPath).to.eql(expectedPath);
        return expect(receivedData).to.eql(expectedData);
      });
      it('should return an error if there was an error in the request', function(done) {
        var Restify, deps, expectedError, instance, params;
        expectedError = {
          message: 'Any error'
        };
        Restify = (function() {
          function Restify() {}

          Restify.createStringClient = function(options) {
            var client;
            return client = {
              post: function(path, object, callback) {
                return callback(expectedError);
              }
            };
          };

          return Restify;

        })();
        deps = {
          restify: Restify
        };
        params = {
          url: '',
          path: '/',
          data: {}
        };
        instance = new HttpConnector(deps);
        return instance.post(params, function(error, success) {
          expect(error).to.eql(expectedError);
          expect(success).not.to.be.ok();
          return done();
        });
      });
      return it('should return the response from the request', function(done) {
        var Restify, deps, expectedResponse, instance, params;
        expectedResponse = {
          message: 'Any response'
        };
        Restify = (function() {
          function Restify() {}

          Restify.createStringClient = function(options) {
            var client;
            return client = {
              post: function(path, object, callback) {
                return callback(null, null, null, expectedResponse);
              }
            };
          };

          return Restify;

        })();
        deps = {
          restify: Restify
        };
        params = {
          url: '',
          path: '/',
          data: {}
        };
        instance = new HttpConnector(deps);
        return instance.post(params, function(error, success) {
          expect(error).not.to.be.ok();
          expect(success).to.eql(expectedResponse);
          return done();
        });
      });
    });
  });

}).call(this);
