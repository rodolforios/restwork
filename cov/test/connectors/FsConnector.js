// Generated by CoffeeScript 1.9.3
(function() {
  'use strict';
  var FsConnector, expect, mockFs;

  FsConnector = require('../../src/connectors/FsConnector');

  expect = require('expect.js');

  mockFs = require('mock-fs');

  describe('the fsConnector,', function() {
    describe('when creating a new file', function(done) {
      it('should return an error if the file already exists', function(done) {
        var NodePersistMock, expectedData, instance, params;
        params = {
          domain: 'Pay',
          resource: 'Order'
        };
        expectedData = {
          id: 123,
          name: 'Michel Teló'
        };
        NodePersistMock = (function() {
          function NodePersistMock() {}

          NodePersistMock.isFile = function() {
            return true;
          };

          NodePersistMock.createDirIfNotExists = function(dir) {
            var first;
            if (first) {
              expect(dir).to.be('Pay');
            }
            if (!first) {
              expect(dir).to.be('Pay/Order');
            }
            if (!first) {
              done();
            }
            return first = false;
          };

          return NodePersistMock;

        })();
        instance = new FsConnector(params, {
          fs: NodePersistMock
        });
        return instance.create(expectedData, function(err) {
          return expect(err).to.be('File already exists.');
        });
      });
      it('should hand to the module the id as the filename and the data to be persisted ', function(done) {
        var NodePersistMock, dataExpect, expectedData, fileNameExpect, instance, params;
        fileNameExpect = null;
        dataExpect = null;
        params = {
          domain: 'Pay',
          resource: 'Order'
        };
        expectedData = {
          id: 123,
          name: 'Michel Teló'
        };
        NodePersistMock = (function() {
          function NodePersistMock() {}

          NodePersistMock.isFile = function() {
            return false;
          };

          NodePersistMock.createFileIfNotExists = function(filename, data) {
            expect(filename).to.be('Pay/Order/123.json');
            return expect(data).to.eql(JSON.stringify(expectedData));
          };

          return NodePersistMock;

        })();
        instance = new FsConnector(params, {
          fs: NodePersistMock
        });
        return instance.create(expectedData, function(error, response) {
          expect(response).to.be.ok();
          return done();
        });
      });
      return it('should catch the exception if thrown', function(done) {
        var NodePersistMock, dataExpect, expectedData, fileNameExpect, instance, params;
        fileNameExpect = null;
        dataExpect = null;
        params = {
          domain: 'Pay',
          resource: 'Order'
        };
        expectedData = {
          id: 123,
          name: 'Michel Teló'
        };
        NodePersistMock = (function() {
          function NodePersistMock() {}

          NodePersistMock.isFile = function() {
            return false;
          };

          NodePersistMock.createFileIfNotExists = function(filename, data) {
            throw new Error('Michel Teló');
          };

          return NodePersistMock;

        })();
        instance = new FsConnector(params, {
          fs: NodePersistMock
        });
        return instance.create(expectedData, function(error, response) {
          expect(error.toString()).to.be('Error: Michel Teló');
          return done();
        });
      });
    });
    return describe('when reading from a file', function() {
      return it('should read from a file and return its contents', function(done) {
        var NodePersistMock, instance, params;
        params = {
          domain: 'Pay',
          resource: 'Order'
        };
        NodePersistMock = (function() {
          function NodePersistMock() {}

          NodePersistMock.isFile = function() {};

          NodePersistMock.createFileIfNotExists = function() {};

          return NodePersistMock;

        })();
        instance = new FsConnector(params, {
          fs: NodePersistMock
        });
        return instance.read('', '1.json', function(err, success) {
          expect(err).to.be.ok();
          return done();
        });
      });
    });
  });

}).call(this);
