// Generated by CoffeeScript 1.9.3
(function() {
  'use strict';
  var MySQLConnector;

  MySQLConnector = (function() {
    var NOT_FOUND_ERROR;

    NOT_FOUND_ERROR = 'NOT_FOUND';

    function MySQLConnector(params, deps) {
      var exceptions, host, password, poolParams, poolSize, timeout, user;
      this.rules = require('waferpie-utils').Rules;
      exceptions = require('waferpie-utils').Exceptions;
      if (!this.rules.isUseful(params)) {
        throw new exceptions.Fatal(exceptions.INVALID_ARGUMENT, 'Missing arguments');
      }
      this.mysql = (deps != null ? deps.mysql : void 0) || require('mysql');
      host = (params != null ? params.host : void 0) || null;
      poolSize = (params != null ? params.poolSize : void 0) || null;
      timeout = (params != null ? params.timeout : void 0) || 10000;
      user = (params != null ? params.user : void 0) || null;
      password = (params != null ? params.password : void 0) || '';
      this.database = (params != null ? params.domain : void 0) || null;
      this.table = (params != null ? params.resource : void 0) || null;
      if (!this.rules.isUseful(host) || !this.rules.isUseful(this.database) || !this.rules.isUseful(this.table) || !this.rules.isUseful(user) || !this.rules.isUseful(poolSize)) {
        throw new exceptions.Fatal(exceptions.INVALID_ARGUMENT, 'Missing one or more arguments');
      }
      poolParams = {
        host: host,
        database: this.database,
        user: user,
        password: password,
        connectionLimit: poolSize,
        acquireTimeout: timeout,
        waitForConnections: 0
      };
      this.pool = this.mysql.createPool(poolParams);
    }

    MySQLConnector.prototype.read = function(id, callback) {
      if (!this.rules.isUseful(id) || this.rules.isZero(id)) {
        return callback('Invalid id');
      }
      return this._execute("SELECT * FROM " + this.table + " WHERE id = ?", [id], (function(_this) {
        return function(err, row) {
          if (err != null) {
            return callback(err);
          }
          if (_this.rules.isUseful(row)) {
            return callback(null, row);
          }
          return callback(NOT_FOUND_ERROR);
        };
      })(this));
    };

    MySQLConnector.prototype._execute = function(query, params, callback) {
      return this.pool.getConnection((function(_this) {
        return function(err, connection) {
          if (err != null) {
            return callback('Error getConnection');
          }
          return _this._selectDatabase("" + _this.database, connection, function(err) {
            if (err != null) {
              connection.release();
              if (err != null) {
                return callback('Error select database');
              }
            }
            return connection.query(query, params, function(err, row) {
              connection.release();
              return callback(err, row);
            });
          });
        };
      })(this));
    };

    MySQLConnector.prototype._selectDatabase = function(databaseName, connection, callback) {
      return connection.query("USE " + databaseName, [], callback);
    };

    MySQLConnector.prototype.create = function(data, callback) {
      var fields, key, value, values;
      if (!this.rules.isUseful(data)) {
        return callback('Invalid data');
      }
      fields = '';
      values = [];
      for (key in data) {
        value = data[key];
        fields += key + "=?,";
        values.push(value);
      }
      fields = fields.substr(0, fields.length - 1);
      return this._execute("INSERT INTO " + this.table + " SET " + fields, values, (function(_this) {
        return function(err, row) {
          if (err != null) {
            return callback(err);
          }
          if (_this.rules.isUseful(row)) {
            return callback(null, row);
          }
        };
      })(this));
    };

    return MySQLConnector;

  })();

  module.exports = MySQLConnector;

}).call(this);
